# T√†i li·ªáu K·ªπ thu·∫≠t - ƒê·∫∑t h√†ng t·ª´ Gi·ªè h√†ng

## T·ªïng quan
T√≠nh nƒÉng cho ph√©p ng∆∞·ªùi d√πng ƒë·∫∑t h√†ng t·ª´ gi·ªè h√†ng, t·ª± ƒë·ªông chia th√†nh nhi·ªÅu ƒë∆°n h√†ng ri√™ng bi·ªát theo t·ª´ng c·ª≠a h√†ng.

## API Endpoint

### POST /api/order/place-orders-from-cart

**Request Body:**
{
  "buyerId": "string",
  "notes": "string (optional)",
  "cartItems": [
    {
      "id": "string",
      "cartId": "string",
      "productId": "string",
      "quantity": number,
      "product": {
        "id": "string",
        "name": "string",
        "price": number,
        "images": "string",
        "unit": "string",
        "storeId": "string",
        "storeName": "string"
      }
    }
  ]
}

**Response Success (200):**
{
  "success": true,
  "message": "ƒê√£ t·∫°o th√†nh c√¥ng 3 ƒë∆°n h√†ng t·ª´ 3 c·ª≠a h√†ng kh√°c nhau",
  "data": {
    "orderCount": 3,
    "totalAmount": 250000,
    "orders": [
      {
        "id": "order_id_1",
        "buyerId": "buyer_id",
        "sellerId": "seller_id_1", 
        "storeName": "C·ª≠a h√†ng A",
        "totalAmount": 100000,
        "status": "Pending",
        "paymentStatus": "Pending",
        "notes": "Ghi ch√∫",
        "createdAt": "2025-07-22T10:30:00Z",
        "items": [
          {
            "productId": "product_1",
            "productName": "T√°o Fuji",
            "productImageUrl": "image1.jpg",
            "productUnitName": "kg",
            "quantity": 2,
            "priceAtPurchase": 50000
          }
        ]
      }
    ]
  }
}

**Response Error (400/500):**
{
  "success": false,
  "message": "L·ªói message",
  "error": "Chi ti·∫øt l·ªói"
}

## Lu·ªìng x·ª≠ l√Ω Frontend

### 1. Thu th·∫≠p d·ªØ li·ªáu
// L·∫•y cart items t·ª´ state/store
const cartItems = getCartItems();
const buyerId = getCurrentUserId();

### 2. G·ªçi API
const placeOrdersFromCart = async (orderData) => {
  try {
    const response = await fetch('/api/order/place-orders-from-cart', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`
      },
      body: JSON.stringify(orderData)
    });
    
    const result = await response.json();
    return result;
  } catch (error) {
    throw error;
  }
};

### 3. X·ª≠ l√Ω k·∫øt qu·∫£
const handlePlaceOrder = async () => {
  try {
    const result = await placeOrdersFromCart({
      buyerId,
      notes,
      cartItems
    });
    
    if (result.success) {
      // Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
      showSuccess(`ƒê√£ t·∫°o ${result.data.orderCount} ƒë∆°n h√†ng`);
      
      // X√≥a cart
      clearCart();
      
      // Chuy·ªÉn ƒë·∫øn trang order history
      navigateToOrderHistory();
    }
  } catch (error) {
    showError('C√≥ l·ªói x·∫£y ra khi ƒë·∫∑t h√†ng');
  }
};

## UI/UX Recommendations

### 1. Hi·ªÉn th·ªã Preview tr∆∞·ªõc khi ƒë·∫∑t h√†ng
‚îå‚îÄ X√°c nh·∫≠n ƒë·∫∑t h√†ng ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ üì¶ C·ª≠a h√†ng A (2 s·∫£n ph·∫©m) - 100,000ƒë   ‚îÇ
‚îÇ üì¶ C·ª≠a h√†ng B (1 s·∫£n ph·∫©m) - 50,000ƒë    ‚îÇ  
‚îÇ üì¶ C·ª≠a h√†ng C (3 s·∫£n ph·∫©m) - 150,000ƒë   ‚îÇ
‚îÇ                                         ‚îÇ
‚îÇ T·ªïng c·ªông: 300,000ƒë                     ‚îÇ
‚îÇ S·ªë ƒë∆°n h√†ng s·∫Ω t·∫°o: 3                   ‚îÇ
‚îÇ                                         ‚îÇ
‚îÇ Ghi ch√∫: [_________________________]    ‚îÇ
‚îÇ                                         ‚îÇ
‚îÇ [H·ªßy]  [X√°c nh·∫≠n ƒë·∫∑t h√†ng]              ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò

### 2. Hi·ªÉn th·ªã k·∫øt qu·∫£
‚îå‚îÄ ƒê·∫∑t h√†ng th√†nh c√¥ng ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ ‚úÖ ƒê√£ t·∫°o th√†nh c√¥ng 3 ƒë∆°n h√†ng         ‚îÇ
‚îÇ                                        ‚îÇ
‚îÇ üìã ƒê∆°n h√†ng #001 - C·ª≠a h√†ng A          ‚îÇ
‚îÇ üìã ƒê∆°n h√†ng #002 - C·ª≠a h√†ng B          ‚îÇ
‚îÇ üìã ƒê∆°n h√†ng #003 - C·ª≠a h√†ng C          ‚îÇ
‚îÇ                                        ‚îÇ
‚îÇ [Xem ƒë∆°n h√†ng] [Ti·∫øp t·ª•c mua s·∫Øm]      ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò

## Validation Rules

### Frontend Validation
- buyerId: Required, kh√¥ng ƒë∆∞·ª£c r·ªóng
- cartItems: Required, ph·∫£i c√≥ √≠t nh·∫•t 1 item
- quantity: Ph·∫£i > 0
- price: Ph·∫£i > 0

### Business Rules
- Ki·ªÉm tra stock quantity tr∆∞·ªõc khi ƒë·∫∑t h√†ng
- Validate s·∫£n ph·∫©m c√≤n available
- Ki·ªÉm tra minimum order quantity

## Error Handling

| Error Code | Message | X·ª≠ l√Ω |
|------------|---------|-------|
| 400 | Gi·ªè h√†ng tr·ªëng | Hi·ªÉn th·ªã th√¥ng b√°o, redirect v·ªÅ cart |
| 400 | S·∫£n ph·∫©m kh√¥ng kh·∫£ d·ª•ng | Highlight s·∫£n ph·∫©m l·ªói, cho ph√©p remove |
| 500 | L·ªói server | Retry mechanism, fallback message |

## Test Cases

1. **Happy Path**: Cart c√≥ s·∫£n ph·∫©m t·ª´ 3 c·ª≠a h√†ng ‚Üí T·∫°o 3 ƒë∆°n h√†ng
2. **Single Store**: Cart ch·ªâ c√≥ s·∫£n ph·∫©m t·ª´ 1 c·ª≠a h√†ng ‚Üí T·∫°o 1 ƒë∆°n h√†ng  
3. **Empty Cart**: Gi·ªè h√†ng tr·ªëng ‚Üí Show error
4. **Invalid Product**: S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i ‚Üí Skip product, t·∫°o ƒë∆°n v·ªõi c√°c s·∫£n ph·∫©m valid

## Backend Implementation Notes

### DTO c·∫ßn t·∫°o:
- CartOrderCreateDto: Ch·ª©a th√¥ng tin ƒë·∫∑t h√†ng t·ª´ cart (ƒë√£ t·∫°o)
- OrderItemDto: C·∫≠p nh·∫≠t ƒë·ªÉ ph√π h·ª£p v·ªõi response

### Service Method:
- PlaceOrdersFromCartAsync(): Nh√≥m cart items theo storeId v√† t·∫°o nhi·ªÅu orders
- CreateNewOrderNotification(): T·∫°o notification n·ªôi b·ªô cho seller

### Database Structure:
- M·ªói Order thu·ªôc v·ªÅ 1 Seller duy nh·∫•t (1:1)
- OrderItems thu·ªôc v·ªÅ 1 Order (1:N)
- Cart ƒë∆∞·ª£c chia th√†nh nhi·ªÅu Orders theo StoreId
- Notification ƒë∆∞·ª£c t·∫°o cho m·ªói seller khi c√≥ ƒë∆°n h√†ng m·ªõi

### Logic Flow:
1. Nh·∫≠n cart items t·ª´ frontend
2. L·∫•y th√¥ng tin buyer m·ªôt l·∫ßn
3. Group theo product.storeId
4. T·∫°o Order ri√™ng cho m·ªói store
5. T·∫°o OrderItems cho m·ªói Order
6. T·∫°o Notification cho m·ªói seller
7. Return danh s√°ch Orders ƒë√£ t·∫°o

### Notification Features:
- T·ª± ƒë·ªông t·∫°o notification cho seller khi c√≥ ƒë∆°n h√†ng m·ªõi
- Notification ƒë∆∞·ª£c l∆∞u trong database collection "Notifications"
- Seller c√≥ th·ªÉ s·ª≠ d·ª•ng API c√≥ s·∫µn ƒë·ªÉ l·∫•y notifications:
  - GET /api/notification - L·∫•y notifications ph√¢n trang (c·∫ßn userId trong token)
  - GET /api/notification/user/my/paged - L·∫•y notifications ph√¢n trang c·ªßa b·∫£n th√¢n
  - GET /api/notification/unread-count - ƒê·∫øm s·ªë notification ch∆∞a ƒë·ªçc

### GET /api/notification/user/my/paged
**Description:** L·∫•y danh s√°ch notifications ph√¢n trang c·ªßa user hi·ªán t·∫°i (l·∫•y userId t·ª´ token)

**Headers:**
```
Authorization: Bearer {token}
```

**Query Parameters:**
- page: int (default: 1) - Trang hi·ªán t·∫°i
- limit: int (default: 10, max: 50) - S·ªë items per page

**Response Success (200):**
```json
{
  "success": true,
  "message": "L·∫•y danh s√°ch th√¥ng b√°o th√†nh c√¥ng.",
  "data": {
    "notifications": [
      {
        "id": "notification_id",
        "userId": "user_id",
        "title": "ƒê∆°n h√†ng m·ªõi",
        "message": "B·∫°n c√≥ ƒë∆°n h√†ng m·ªõi t·ª´ Kh√°ch h√†ng A...",
        "type": "NEW_ORDER",
        "isRead": false,
        "createdAt": "2025-07-22T10:30:00Z"
      }
    ],
    "pagination": {
      "currentPage": 1,
      "pageSize": 10,
      "totalItems": 25,
      "totalPages": 3,
      "hasNextPage": true,
      "hasPreviousPage": false
    }
  }
}
```

**Response Error (401):**
```json
{
  "success": false,
  "message": "Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c user t·ª´ token."
}
```

### Frontend Usage Example:
```javascript
const getMyNotifications = async (page = 1, limit = 10) => {
  try {
    const response = await fetch(`/api/notification/user/my/paged?page=${page}&limit=${limit}`, {
      headers: {
        'Authorization': `Bearer ${localStorage.getItem('token')}`
      }
    });
    const result = await response.json();
    return result;
  } catch (error) {
    console.error('Error getting notifications:', error);
  }
};
```

### Notification Content:
- Title: "ƒê∆°n h√†ng m·ªõi"
- Message: "B·∫°n c√≥ ƒë∆°n h√†ng m·ªõi t·ª´ [T√™n kh√°ch h√†ng] t·∫°i c·ª≠a h√†ng [T√™n c·ª≠a h√†ng]. Gi√° tr·ªã: [S·ªë ti·ªÅn]ƒë. M√£ ƒë∆°n: #[Order ID]"
- Type: "NEW_ORDER"
- IsRead: false (m·∫∑c ƒë·ªãnh)

## Cancel Order API

### POST /api/order/{orderId}/cancel

**Description:** H·ªßy ƒë∆°n h√†ng v·ªõi l√Ω do (buyer ho·∫∑c seller c√≥ th·ªÉ h·ªßy)

**Headers:**
```
Authorization: Bearer {token}
Content-Type: application/json
```

**Route Parameters:**
- orderId: string - ID c·ªßa ƒë∆°n h√†ng c·∫ßn h·ªßy

**Request Body:**
```json
{
  "cancelReason": "Kh√¥ng c√≤n c·∫ßn s·∫£n ph·∫©m n√†y n·ªØa"
}
```

**Response Success (200):**
```json
{
  "success": true,
  "message": "ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c h·ªßy th√†nh c√¥ng",
  "data": {
    "orderId": "64f8a2b1c3d4e5f6a7b8c9d0",
    "cancelReason": "Kh√¥ng c√≤n c·∫ßn s·∫£n ph·∫©m n√†y n·ªØa",
    "status": "Cancelled",
    "updatedAt": "2025-07-22T10:30:00Z"
  }
}
```

**Response Error (400):**
```json
{
  "success": false,
  "message": "Kh√¥ng th·ªÉ h·ªßy ƒë∆°n h√†ng ·ªü tr·∫°ng th√°i Delivering"
}
```

**Response Error (403):**
```json
{
  "success": false,
  "message": "B·∫°n kh√¥ng c√≥ quy·ªÅn h·ªßy ƒë∆°n h√†ng n√†y"
}
```

**Business Rules:**
- Ch·ªâ c√≥ th·ªÉ h·ªßy khi tr·∫°ng th√°i: Pending, Confirmed
- Buyer c√≥ th·ªÉ h·ªßy ƒë∆°n h√†ng c·ªßa m√¨nh
- Seller c√≥ th·ªÉ h·ªßy ƒë∆°n h√†ng trong c·ª≠a h√†ng c·ªßa m√¨nh
- Khi h·ªßy s·∫Ω g·ª≠i notification cho b√™n c√≤n l·∫°i
- L√Ω do h·ªßy l√† b·∫Øt bu·ªôc (10-500 k√Ω t·ª±)

## Order Status Flow

### Lu·ªìng tr·∫°ng th√°i ƒë∆°n h√†ng:
1. **Pending** - Ng∆∞·ªùi mua m·ªõi ƒë·∫∑t h√†ng
2. **Confirmed** - Ng∆∞·ªùi b√°n x√°c nh·∫≠n c√≤n h√†ng
3. **Paid** - Ng∆∞·ªùi b√°n x√°c nh·∫≠n ƒë√£ nh·∫≠n ƒë∆∞·ª£c ti·ªÅn  
4. **Completed** - Ng∆∞·ªùi mua x√°c nh·∫≠n ƒë√£ nh·∫≠n ƒë√∫ng h√†ng
5. **Cancelled** - ƒê∆°n h√†ng b·ªã h·ªßy (c√≥ th·ªÉ t·ª´ Pending ho·∫∑c Confirmed)

### API Endpoints cho Order Status:

#### POST /api/order/{orderId}/confirm
**Description:** Seller x√°c nh·∫≠n c√≤n h√†ng (Pending ‚Üí Confirmed)
**Authorization:** Seller, Admin
**Response:**
```json
{
  "success": true,
  "message": "ƒê√£ x√°c nh·∫≠n ƒë∆°n h√†ng th√†nh c√¥ng",
  "data": { "orderId": "...", "status": "Confirmed" }
}
```

#### POST /api/order/{orderId}/mark-paid  
**Description:** Seller x√°c nh·∫≠n ƒë√£ nh·∫≠n ti·ªÅn (Confirmed ‚Üí Paid)
**Authorization:** Seller, Admin
**Response:**
```json
{
  "success": true,
  "message": "ƒê√£ x√°c nh·∫≠n nh·∫≠n ti·ªÅn th√†nh c√¥ng", 
  "data": { "orderId": "...", "status": "Paid" }
}
```

#### POST /api/order/{orderId}/complete
**Description:** Buyer x√°c nh·∫≠n ƒë√£ nh·∫≠n h√†ng (Paid ‚Üí Completed) 
**Authorization:** Buyer, Admin
**Response:**
```json
{
  "success": true,
  "message": "ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c x√°c th·ª±c th√†nh c√¥ng"
}
```

### Frontend Usage:
```javascript
const cancelOrder = async (orderId, cancelReason) => {
  const response = await fetch(`/api/order/${orderId}/cancel`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${token}`
    },
    body: JSON.stringify({ cancelReason })
  });
  return await response.json();
};
```
