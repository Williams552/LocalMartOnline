================================================================================
                    TH√îNG TIN K·ª∏ THU·∫¨T API orders/{orderId}/proof
================================================================================

üìç ENDPOINT INFORMATION
================================================================================
URL: POST /api/ProxyShopper/orders/{orderId}/proof
M·ª•c ƒë√≠ch: Proxy Shopper upload ·∫£nh ch·ª©ng t·ª´ mua h√†ng (h√≥a ƒë∆°n, s·∫£n ph·∫©m th·ª±c t·∫ø)
Controller: ProxyShopperController
Method: UploadBoughtItems

üîê AUTHORIZATION
================================================================================
- Required Role: "Proxy Shopper"
- Authentication: JWT Bearer Token
- Authorization Header: Bearer {token}

üìã PARAMETERS
================================================================================

PATH PARAMETERS:
- orderId (string, required): ID c·ªßa ƒë∆°n h√†ng proxy shopping

REQUEST BODY (JSON):
{
  "imageUrls": [
    "https://example.com/image1.jpg",
    "https://example.com/image2.jpg"
  ],
  "note": "ƒê√£ mua ƒë·∫ßy ƒë·ªß c√°c s·∫£n ph·∫©m theo y√™u c·∫ßu"
}

DTO STRUCTURE:
public class UploadBoughtItemsDTO
{
    public List<string> ImageUrls { get; set; } = new();
    public string? Note { get; set; }
}

üîÑ BUSINESS LOGIC
================================================================================

VALIDATION RULES:
1. User ph·∫£i c√≥ role "Proxy Shopper"
2. Order ph·∫£i t·ªìn t·∫°i trong database
3. Order ph·∫£i ·ªü tr·∫°ng th√°i "InProgress" (ƒëang mua h√†ng)

PROCESSING FLOW:
1. L·∫•y proxyShopperId t·ª´ JWT token (hi·ªán t·∫°i kh√¥ng validate)
2. G·ªçi service method UploadBoughtItemsAsync()
3. Service t√¨m order theo orderId
4. Ki·ªÉm tra order.Status == ProxyOrderStatus.InProgress
5. C·∫≠p nh·∫≠t order.Notes v·ªõi th√¥ng tin t·ª´ request
6. C·∫≠p nh·∫≠t order.UpdatedAt = DateTime.UtcNow
7. L∆∞u order v√†o database

üì§ RESPONSE FORMATS
================================================================================

SUCCESS (200 OK):
{} 
// Empty response body

ERROR RESPONSES:
- 400 Bad Request: "Kh√¥ng th·ªÉ upload ·∫£nh cho ƒë∆°n n√†y."
- 401 Unauthorized: Token kh√¥ng h·ª£p l·ªá ho·∫∑c role kh√¥ng ƒë√∫ng

üö® CRITICAL ISSUES IDENTIFIED
================================================================================

1. IMAGE URLS NOT SAVED:
   - Code hi·ªán t·∫°i KH√îNG l∆∞u imageUrls v√†o database
   - Ch·ªâ c√≥ comment TODO: "l∆∞u imageUrls v√†o field m·ªõi (ProofImages)"
   - Ch·ªâ l∆∞u Note, b·ªè qua ImageUrls ho√†n to√†n

2. MISSING VALIDATION:
   - Kh√¥ng validate format c·ªßa image URLs
   - Kh√¥ng ki·ªÉm tra proxy shopper c√≥ quy·ªÅn v·ªõi order n√†y kh√¥ng
   - Kh√¥ng validate s·ªë l∆∞·ª£ng/k√≠ch th∆∞·ªõc ·∫£nh

3. POOR ERROR HANDLING:
   - Response message kh√¥ng chi ti·∫øt
   - Kh√¥ng ph√¢n bi·ªát l·ªói do order kh√¥ng t·ªìn t·∫°i vs status sai

4. SECURITY ISSUES:
   - Kh√¥ng validate image URL domains (SSRF risk)
   - Kh√¥ng ki·ªÉm tra ownership c·ªßa order

üìä CURRENT CODE IMPLEMENTATION
================================================================================

CONTROLLER CODE:
[HttpPost("orders/{orderId}/proof")]
[Authorize(Roles = "Proxy Shopper")]
public async Task<IActionResult> UploadBoughtItems(string orderId, [FromBody] UploadBoughtItemsDTO dto)
{
    var ok = await _proxyShopperService.UploadBoughtItemsAsync(orderId, dto.ImageUrls, dto.Note);
    return ok ? Ok() : BadRequest("Kh√¥ng th·ªÉ upload ·∫£nh cho ƒë∆°n n√†y.");
}

SERVICE CODE:
public async Task<bool> UploadBoughtItemsAsync(string orderId, List<string> imageUrls, string? note)
{
    var order = await _orderRepo.FindOneAsync(o => o.Id == orderId);
    if (order == null || order.Status != ProxyOrderStatus.InProgress) return false;
    // TODO: l∆∞u imageUrls v√†o field m·ªõi (ProofImages)
    order.Notes = note;
    order.UpdatedAt = DateTime.UtcNow;
    await _orderRepo.UpdateAsync(orderId, order);
    return true;
}

üõ†Ô∏è RECOMMENDED IMPROVEMENTS
================================================================================

1. UPDATE PROXYSHOPPINGORDER MODEL:
   Add new field:
   [BsonElement("proof_images")]
   public List<string> ProofImages { get; set; } = new();

2. ENHANCED VALIDATION:
   - Validate image URL format
   - Check proxy shopper ownership
   - Validate image count limits
   - Add URL security checks

3. IMPROVED ERROR HANDLING:
   - Detailed error messages
   - Proper HTTP status codes
   - Structured error responses

4. ENHANCED RESPONSE:
   return Ok(new { 
       message = "Upload th√†nh c√¥ng",
       imageCount = dto.ImageUrls?.Count ?? 0,
       orderId = orderId 
   });

5. LOGGING:
   - Add comprehensive logging
   - Track upload attempts
   - Monitor failures

üìù SAMPLE REQUEST/RESPONSE
================================================================================

SAMPLE REQUEST:
POST /api/ProxyShopper/orders/64f1a2b3c4d5e6f7g8h9i0j1/proof
Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
Content-Type: application/json

{
  "imageUrls": [
    "https://storage.example.com/receipts/receipt_001.jpg",
    "https://storage.example.com/products/product_photo_001.jpg"
  ],
  "note": "ƒê√£ mua ƒë·∫ßy ƒë·ªß c√°c s·∫£n ph·∫©m theo y√™u c·∫ßu. H√≥a ƒë∆°n v√† ·∫£nh s·∫£n ph·∫©m th·ª±c t·∫ø ƒë√£ ƒë∆∞·ª£c ch·ª•p."
}

CURRENT RESPONSE (Success):
HTTP 200 OK
{}

CURRENT RESPONSE (Error):
HTTP 400 Bad Request
"Kh√¥ng th·ªÉ upload ·∫£nh cho ƒë∆°n n√†y."

SUGGESTED IMPROVED RESPONSE:
HTTP 200 OK
{
  "message": "Upload th√†nh c√¥ng",
  "imageCount": 2,
  "orderId": "64f1a2b3c4d5e6f7g8h9i0j1",
  "uploadedAt": "2025-08-01T10:30:00Z"
}

üîó INTEGRATION POINTS
================================================================================
- File Upload Service: C·∫ßn t√≠ch h·ª£p ƒë·ªÉ handle file upload th·ª±c t·∫ø
- Image Validation Service: URL format, file size, image type validation
- Storage Service: Cloud storage integration (AWS S3, Azure Blob, etc.)
- Notification Service: Th√¥ng b√°o cho buyer khi c√≥ proof images

üîí SECURITY CONSIDERATIONS
================================================================================
- Validate image URL domains (prevent SSRF attacks)
- Implement file size limits
- Check image content type
- Rate limiting for uploads
- Audit trail for proof uploads
- Access control validation

üìÖ CREATED: August 1, 2025
üìÑ FILE: API_Technical_Documentation_orders_proof.txt
üèóÔ∏è PROJECT: LocalMartOnline - Proxy Shopping Module

================================================================================
